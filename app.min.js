Alteryx.Gui.BeforeLoad = function(manager, AlteryxDataItems){
  console.log("Before Load ----");
  var dataItem = makeDataItem(manager, AlteryxDataItems);
  dataItem('curPage', {value: "Home"})
  dataItem('curTab', {value: "advanced"})
};

var numericAndStringTypes = [
  'Int16', 'Int32', 'Int64', 'Float', 'Double', 'FixedDecimal',
  'String', 'WString', 'V_String', 'V_WString'
];

var stringTypes = [
  'String', 'WString', 'V_String', 'V_WString'
]
var numericTypes = [
  'Int16', 'Int32', 'Int64', 'Float', 'Double', 'FixedDecimal'
];

Alteryx.Gui.AfterLoad = function(manager){
  console.log("After Load ----");
  // display dropdown to select weighting variable only when user has chosen
  // to use weights.
  //makeFieldMap("X Vars")
  displayTarget('weight-vec', 'Use Weights', function(v){return v})
  handleSetupComplete()
  makeFieldMap('X Vars', numericAndStringTypes)
  Alteryx.Gui.manager.GetDataItem("Y Var").BindUserDataChanged(function(){
     makeFieldMap('X Vars', numericAndStringTypes)
  })
  var curPage = manager.GetDataItem('curPage')
  var curTab = manager.GetDataItem('curTab')
  if (curPage.getValue() == "Home") {
    switchToHome(curPage)
  }  else {
    switchToCustomize(curPage)
    handleTabs(curTab)
  }
  $("#switch-to-customize").on('click', function(){
    switchToCustomize(curPage)
    handleTabs(curTab)
  })
  $("#switch-to-home").on('click', function(){
    switchToHome(curPage)
  })
};

Alteryx.Gui.Annotation = function(manager){
  
};

function switchToCustomize(curPage){
  curPage.setValue("Customize")
  $('#page-basic').hide()
  $('#page-customize').show()
  $(".tabpage").hide()
  $('#tabpage-advanced').show()
}
function switchToHome(curPage){
  curPage.setValue("Home")
  $('#page-basic').show()
  $('#page-customize').hide()
}

function handleTabs(curTab){
  var activePage = curTab.getValue()
  $('.tabpage').hide()
  $('#tabpage-' + activePage).show()
  $('.tab').removeClass('is-tab-selected')
  $('#' + activePage).addClass('is-tab-selected')
  $('.tab').click(function(){
    $('.tabpage').hide()
    var activePage = $(this).data('page')
    curTab.setValue(activePage)
    $('#tabpage-' + activePage).show()
    $('.tab').removeClass('is-tab-selected')
    $('#' + activePage).addClass('is-tab-selected')
  })
}

function displayTarget(targetId, di, cond) {
  var resize = arguments.length <= 3 || arguments[3] === undefined ? false : arguments[3];

  var condition = void 0;
  if (typeof cond == 'undefined') {
    condition = function condition(v) {
      return v;
    };
  } else if (typeof cond == 'string') {
    condition = function condition(v) {
      return v === cond;
    };
  } else {
    condition = cond;
  }
  var dataItem = Alteryx.Gui.manager.GetDataItemByDataName(di);
  var targetDiv = document.getElementById(targetId);
  function display(v) {
    targetDiv.style.display = condition(v) ? 'block' : 'none';
    console.log("Resizing ", v);
    window.dispatchEvent(new Event('resize'));
  }
  dataItem.BindUserDataChanged(display);
  display(dataItem.value);
}


function createUIObject(x) {
  function a2ui(d) {
    return { uiobject: d, dataname: d };
  }
  function o2ui(d) {
    return { uiobject: x[d], dataname: d };
  }
  const f = (x.constructor === Array) ? a2ui : o2ui;
  const y = (x.constructor === Array) ? x : Object.keys(x);
  return y.map(f);
}

function makeDataItem(manager, AlteryxDataItems) {
  return function f(id, props, type = 'SimpleString') {
    let value;
    let dtype;
    if (props.values) {
      dtype = props.values.constructor === Array
        ? 'MultiStringSelector'
        : 'StringSelector';
    } else {
      dtype = type;
    }
    const di = manager.GetDataItem(id);
    const newItem = di || new AlteryxDataItems[dtype]({ id, dataname: id });
    if (dtype === 'StringSelector' || dtype === 'MultiStringSelector') {
      const data = createUIObject(props.values);
      newItem.setStringList(data);
      value = props.value ? props.value : data[0].dataname;
    } else {
      value = props.value;
    }
    manager.AddDataItem(newItem);
    if (value) newItem.setValue(value);
    return newItem;
  };
}

function handleSetupComplete(){
  var manager = Alteryx.Gui.manager
  var items = ['Model Name', 'Y Var', 'X Vars']
  var showTick = function(){
    var incompleteItems = items
      .map(function(d){return manager.GetDataItem(d).value})
      .filter(function(d){return d == ""})
      .length
    if (incompleteItems === 0) {
      $("#switch-to-customize").css('visibility', 'visible')
    } else {
      $("#switch-to-customize").css('visibility', 'hidden')
    } 
  }
  showTick()
  items.forEach(function(d){
    manager.GetDataItem(d).BindUserDataChanged(showTick)
  })
}

function makeFieldMap(id, allowedTypes){
  var manager = Alteryx.Gui.manager
  if (manager.metaInfo.Get(0)){
    var fields = manager
      .metaInfo.Get(0)
      ._GetFields()
      .filter(d => allowedTypes.indexOf(d.strType) >= 0)
      .map(d => d.strName)
  } else {
    var fields = []
  }
  var di = manager.GetDataItem(id);
  di.setStringList(fields
    .filter(function(d){
      console.log(Alteryx.Gui.manager.GetDataItem("Y Var").value)
      return d != Alteryx.Gui.manager.GetDataItem("Y Var").value
    })
    .map(function(d){
      return {uiobject: d, dataname: d}
    }), true)
  console.log(di.getValue())
}

function ayxDataTypes(){
  return ({
    numeric: ['Int16', 'Int32', 'Int64', 'Float', 'Double', 'FixedDecimal'],
    string: ['String', 'WString', 'V_String', 'V_WString']
  })
}